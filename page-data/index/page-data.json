{"componentChunkName":"component---src-pages-index-js","path":"/","result":{"data":{"site":{"siteMetadata":{"title":"모던리액트딥다이브 스터디를 하고 있습니다."}},"allMarkdownRemark":{"nodes":[{"excerpt":"🔍 1. 란? 함수형 컴포넌트에서 상태값을 만들고, 그 값을 변경할 수 있도록 도와주는 Hook. 🧠 2. 기본 개념 정리 용어 설명  상태값을 선언함  현재 상태값  상태를 변경하는 함수 (변경 시 자동으로 렌더링됨) 초기값 의…","fields":{"slug":"/리액트HOOK/"},"frontmatter":{"date":"May 23, 2025","title":"useState는 리액트 Hook 중 가장 기본","description":"`useState`는 리액트 Hook 중 가장 기본이면서도 **가장 자주 사용되는 상태(state) 관리 도구**야. 아래 내용을 통해 `useState`를 완벽히 이해할 수 있게 단계별로 설명할게!"}},{"excerpt":"1. 렌더링(Rendering)이란? 화면(UI)을 그리는 과정\r\n리액트가 여러분의 컴포넌트(함수나 클래스)를 바탕으로 실제 브라우저 화면에 보이는 HTML 요소를 만들어 내는 일을 “렌더링”이라고 해요. “처음 그리기” vs…","fields":{"slug":"/리액트의렌더링/"},"frontmatter":{"date":"May 23, 2025","title":"React의 렌더링 과정을 파악하자","description":"React의 렌더링 과정을 한눈에 파악할 수 있도록, 최대한 쉬운 말과 단계별 흐름으로 설명해볼게요."}},{"excerpt":"1. 가상 DOM(Virtual DOM)이란? 정의: 메모리 위에 존재하는 “DOM 트리의 가벼운 복사본” 구조: 왜 쓰나? 실제 브라우저 DOM 조작은 비용(레이아웃·페인트)↑ 순수 JS 객체 비교(diffing)는 빠름 변경된 부분만 실제 DOM…","fields":{"slug":"/DOM이용하기/"},"frontmatter":{"date":"May 22, 2025","title":"가상 DOM(Virtual DOM)","description":"**메모리상의 가벼운 객체**   실제 브라우저 DOM과 거의 같은 구조를 가진 자바스크립트 객체 트리 **React 내부에서만 존재**   우리가 작성한 JSX ➔ `React.createElement()` ➔ 가상 DOM 트리를 생성 "}},{"excerpt":"JSX 기초 강의 이 문서는 React 초보자를 위해 JSX의 개념과 기본 문법, 활용법을 설명합니다. 1. JSX란 무엇인가? JSX(JavaScript XML)는 JavaScript 코드 안에서 HTML…","fields":{"slug":"/JSX/"},"frontmatter":{"date":"May 22, 2025","title":"JSX란 무엇인가?","description":"(JavaScript XML)는 JavaScript 코드 안에서 HTML과 유사한 문법을 사용할 수 있게 해 주는 **문법 설탕**입니다. 내부적으로는 모두 `React.createElement()` 호출로 변환되어, 최종적으로 DOM에 렌더링됩니다."}},{"excerpt":"개요 JavaScript의 이벤트 루프는 동기 코드, 태스크 큐(맥로태스크), 마이크로 태스크 큐를 통해 비동기 작업을 관리합니다. 본 포스트에서는 각 실행 방식의 차이점을 살펴보고 예제 코드를 통해 이해를 돕습니다.…","fields":{"slug":"/비동기-동기/"},"frontmatter":{"date":"May 22, 2025","title":"리액트에서 자주 사용하는 자바스크립트 문법","description":"JavaScript의 이벤트 루프는 동기 코드, 태스크 큐(맥로태스크), 마이크로 태스크 큐를 통해 비동기 작업을 관리합니다.  본 포스트에서는 각 실행 방식의 차이점을 살펴보고 예제 코드를 통해 이해를 돕습니다."}},{"excerpt":"클로저(Closure) 입문 및 활용 정리 📘 1. 클로저란? 클로저는 함수가 선언될 당시의 스코프(lexical environment)를 기억하는 함수입니다. 함수가 실행된 이후에도 그 스코프에 접근할 수 있는 함수를 클로저라고 부릅니다. 🔹…","fields":{"slug":"/클로저의 활용/"},"frontmatter":{"date":"May 22, 2025","title":"클로저 입문 및 활용 정리","description":"JavaScript 클로저 개념과 예제를 코드 중심으로 정리한 글. 클로저는 함수가 선언될 당시의 스코프(lexical environment)를 기억하는 함수입니다. 함수가 실행된 이후에도 그 스코프에 접근할 수 있는 함수를 클로저라고 부릅니다. 기본 예제: 전역 변수 없이 상태 관리하기"}},{"excerpt":"Phase 1. 언어 & 실행 환경 이해 1. JVM · JDK · JRE 개요 목표: 자바 프로그램이 어떻게 실행되는지, JDK/JRE/JVM의 역할을 명확히 이해 주요 내용: 클래스 로딩 과정, 바이트코드 → JIT 컴파일, 메모리 구조(Heap…","fields":{"slug":"/Java기초/"},"frontmatter":{"date":"May 23, 2024","title":"#java 0. 자바 “기초”에 집중","description":"오로지 자바 “기초”에 집중해 완벽한 이해를 돕기 위해 재구성한 커리큘럼입니다. 각 모듈별로 학습 목표와 주요 학습 내용을 담고 있으니, 이 순서대로 차근차근 따라가 보세요."}},{"excerpt":"This is my first post on my new fake blog! How exciting! I'm sure I'll write a lot more interesting things in the future. Oh, and here's a…","fields":{"slug":"/hello-world/"},"frontmatter":{"date":"May 01, 2015","title":"Hello World","description":"Hello World"}}]}},"pageContext":{}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}