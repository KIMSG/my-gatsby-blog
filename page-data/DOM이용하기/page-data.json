{"componentChunkName":"component---src-templates-blog-post-js","path":"/DOM이용하기/","result":{"data":{"site":{"siteMetadata":{"title":"모던리액트딥다이브 스터디를 하고 있습니다."}},"markdownRemark":{"id":"d9bff85d-455b-5e4e-9388-2103588ef4a6","excerpt":"1. 가상 DOM(Virtual DOM)이란? 정의: 메모리 위에 존재하는 “DOM 트리의 가벼운 복사본” 구조: 왜 쓰나? 실제 브라우저 DOM 조작은 비용(레이아웃·페인트)↑ 순수 JS 객체 비교(diffing)는 빠름 변경된 부분만 실제 DOM에 한 번에 적용(=배치 업데이트)…","html":"<h1>1. 가상 DOM(Virtual DOM)이란?</h1>\n<ul>\n<li><strong>정의</strong>: 메모리 위에 존재하는 “DOM 트리의 가벼운 복사본”</li>\n<li><strong>구조</strong>:\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// JSX로 작성한 요소가 내부적으로 바뀌는 모습</span>\r\n<span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>Hello<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\r\n<span class=\"token comment\">// ↓ React.createElement 호출</span>\r\n<span class=\"token punctuation\">{</span>\r\n  <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token string\">'Hello'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token literal-property property\">key</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token literal-property property\">ref</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<ul>\n<li>\n<p><strong>왜 쓰나?</strong></p>\n<ol>\n<li>실제 브라우저 DOM 조작은 비용(레이아웃·페인트)↑</li>\n<li>순수 JS 객체 비교(diffing)는 빠름</li>\n<li>변경된 부분만 실제 DOM에 한 번에 적용(=배치 업데이트)</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h1>2. 실제 DOM vs. 가상 DOM 비교</h1>\n<table>\n<thead>\n<tr>\n<th>항목</th>\n<th>실제 DOM</th>\n<th>가상 DOM</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>저장 위치</td>\n<td>브라우저 엔진(렌더 트리)</td>\n<td>자바스크립트 메모리</td>\n</tr>\n<tr>\n<td>조작 방식</td>\n<td>즉시 반영 → 레이아웃/페인트</td>\n<td>객체 업데이트 후 “비교”</td>\n</tr>\n<tr>\n<td>업데이트 비용</td>\n<td>노드 탐색·수정 시 오버헤드 큼</td>\n<td>순수 JS 객체 조작만 수행</td>\n</tr>\n<tr>\n<td>업데이트 전략</td>\n<td>수시로 변경</td>\n<td>변경점만 찾아 배치 적용</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1>3. React의 가상 DOM 관리 흐름</h1>\n<ol>\n<li>\n<p><strong>초기 렌더링</strong></p>\n<ul>\n<li><code class=\"language-text\">App</code> 컴포넌트 호출 → 가상 DOM 트리(OldTree) 생성</li>\n<li>OldTree를 <strong>한 번</strong> 실제 DOM에 반영</li>\n</ul>\n</li>\n<li>\n<p><strong>상태(State)／속성(Props) 변경</strong></p>\n<ul>\n<li><code class=\"language-text\">setState()</code> 또는 부모로부터 새로운 <code class=\"language-text\">props</code> 수신</li>\n<li>변경된 컴포넌트만 <strong>새 가상 DOM 트리(NewTree)</strong> 생성</li>\n</ul>\n</li>\n<li>\n<p><strong>Diffing 알고리즘</strong></p>\n<ul>\n<li>OldTree vs. NewTree를 <strong>1:1 비교</strong></li>\n<li>달라진 노드만 “패치 목록(patches)”으로 추려냄</li>\n</ul>\n</li>\n<li>\n<p><strong>Commit 단계</strong></p>\n<ul>\n<li>patches를 묶어서 실제 DOM에 한번에 반영</li>\n<li>불필요한 레이아웃·페인트 최소화</li>\n</ul>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[State 변화]\r\n    ↓\r\n[JSX → NewTree 생성]\r\n    ↓\r\n[OldTree와 비교(diff)]\r\n    ↓\r\n[패치 목록 계산]\r\n    ↓\r\n[실제 DOM에 batch 적용]</code></pre></div>\n<hr>\n<h1>4. ReactDOM이란?</h1>\n<ul>\n<li><strong>역할</strong>: React(가상 DOM) ↔ 실제 브라우저 DOM(HTML) 연결 다리</li>\n<li><strong>패키지</strong>: <code class=\"language-text\">react-dom</code> (브라우저 전용)</li>\n<li><strong>서버 사이드 렌더링</strong>: <code class=\"language-text\">react-dom/server</code> 사용</li>\n</ul>\n<hr>\n<h1>5. ReactDOM 주요 API</h1>\n<h3>React 17 이하: <code class=\"language-text\">ReactDOM.render</code></h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom\"</span>\r\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">\"./App\"</span>\r\n\r\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>JSX → 가상 DOM 생성 → 초기 실제 DOM 마운트</li>\n</ul>\n<h3>React 18 이상: <code class=\"language-text\">createRoot</code></h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createRoot <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom/client\"</span>\r\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">\"./App\"</span>\r\n\r\n<span class=\"token keyword\">const</span> container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> <span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span>\r\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li><strong>동시성 모드(Concurrent Mode)</strong> 지원</li>\n<li>업데이트 우선순위 제어, 점진 렌더링 가능</li>\n</ul>\n<h3>Hydration (SSR 후 “붙이기”)</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom\"</span>\r\n\r\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">hydrate</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>서버에서 미리 렌더링된 HTML 위에 이벤트 바인딩</li>\n</ul>\n<hr>\n<h1>6. Virtual DOM ↔ ReactDOM 연결 흐름</h1>\n<ol>\n<li>\n<p><strong>사용자 코드</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span> <span class=\"token operator\">=></span> c <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p><strong>ReactDOM.render/createRoot</strong> 호출</p>\n</li>\n<li>\n<p><strong>가상 DOM(OldTree)</strong> 생성 → 실제 DOM 마운트</p>\n</li>\n<li>\n<p><strong>버튼 클릭 → setCount</strong></p>\n</li>\n<li>\n<p><strong>가상 DOM(NewTree)</strong> 생성</p>\n</li>\n<li>\n<p><strong>OldTree vs. NewTree diff</strong></p>\n</li>\n<li>\n<p><strong>패치 → ReactDOM.commit</strong> → 실제 <code class=\"language-text\">&lt;button></code> 텍스트만 교체</p>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">App 초기 마운트\r\n[OldTree 생성]───▶[실제 DOM 삽입(root)]\r\n     │\r\n버튼 클릭\r\n     ↓\r\n[NewTree 생성]\r\n     ↓\r\n[Diff 계산]\r\n     ↓\r\n[ReactDOM으로 변경된 부분만 실제 DOM에 적용]</code></pre></div>\n<p>React의 <strong>Diffing(차이 계산)</strong> 알고리즘은 여러분이 직접 호출하는 코드가 아니라, React가 <strong>컴포넌트 업데이트(Update)</strong> 를 감지했을 때 “자동으로” 수행됩니다. 좀 더 구체적으로 살펴볼게요.</p>\n<hr>\n<h2>1. 언제 Diff를 계산하나?</h2>\n<ol>\n<li>\n<p><strong>초기 마운트</strong></p>\n<ul>\n<li><code class=\"language-text\">ReactDOM.render()</code>(또는 <code class=\"language-text\">root.render()</code>) 로 컴포넌트를 처음 그릴 때</li>\n<li>이전 가상 DOM이 없으니, “빈 트리 → 새 트리” 형태로 그냥 생성만 함</li>\n</ul>\n</li>\n<li>\n<p><strong>업데이트 발생</strong></p>\n<ul>\n<li><strong><code class=\"language-text\">setState()</code> 호출</strong> 또는 부모로부터 <strong>새 props</strong> 전달</li>\n<li>React는 내부적으로 이걸 <strong>“업데이트가 필요하다”고 표시</strong>(스케줄)</li>\n<li>스케줄된 업데이트가 실행되면 <strong>Render(렌더) 단계</strong>가 시작되고,\r\n→ <strong>새 가상 DOM(NewTree) 생성</strong>\r\n→ <strong>곧바로 oldTree vs newTree 비교(diffing)</strong></li>\n<li>이 시점에 React는 “이전 트리”와 “새 트리”를 비교해서 최소한의 변경점만 메모해둡니다.</li>\n</ul>\n</li>\n<li>\n<p><strong>Commit 단계</strong></p>\n<ul>\n<li>계산된 변경점(patches)을 실제 DOM에 적용</li>\n<li>이때부터 사용자 화면에 반영</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2>2. 소스 코드 상에서는 어디서?</h2>\n<p>React 16 이후 내부 구조가 <strong>Fiber</strong> 모델로 바뀌었는데, 핵심 함수들이 대략 다음과 같습니다. (<em>물론 이걸 직접 건드릴 일은 없어요!</em>)</p>\n<ul>\n<li>\n<p><strong><code class=\"language-text\">scheduleUpdateOnFiber</code></strong></p>\n<ul>\n<li><code class=\"language-text\">setState()</code> 를 만나면 이걸 호출해서 업데이트를 예약</li>\n</ul>\n</li>\n<li>\n<p><strong><code class=\"language-text\">beginWork</code> / <code class=\"language-text\">reconcileChildren</code></strong></p>\n<ul>\n<li>Fiber 트리(가상 DOM)를 돌면서 새로운 자식 노드와 옛 자식 노드를 비교(diff)</li>\n</ul>\n</li>\n<li>\n<p><strong><code class=\"language-text\">completeWork</code></strong></p>\n<ul>\n<li>Diff 결과로 생성된 “부작용 목록”(Effect List)을 모아둠</li>\n</ul>\n</li>\n<li>\n<p><strong><code class=\"language-text\">commitRoot</code></strong></p>\n<ul>\n<li>모아둔 부작용(= 실제 DOM 변경사항)을 실제 DOM에 적용</li>\n</ul>\n</li>\n</ul>\n<p>여러분이 쓰는 코드는 오직 <code class=\"language-text\">setState()</code> 혹은 <code class=\"language-text\">render()</code> 호출뿐이고,\r\n이 함수들이 내부에서 알아서 <strong>“지금이 diff 시점이구나!”</strong> 하고 돌려 줍니다.</p>\n<hr>\n<h2>3. 한눈에 보는 흐름도</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[사용자 코드]\r\n  setState(...) 호출\r\n        ↓\r\n[Scheduler]\r\n  업데이트 예약\r\n        ↓\r\n[Render Phase]\r\n  1) NewTree 생성\r\n  2) OldTree vs NewTree 비교(diff)\r\n        ↓\r\n[Commit Phase]\r\n  변경점만 실제 DOM에 일괄 반영\r\n        ↓\r\n[화면 갱신 완료]</code></pre></div>\n<hr>\n<h3>요약</h3>\n<ul>\n<li>\n<p><strong>언제?</strong>\r\n→ 여러분이 <code class=\"language-text\">setState</code>, 혹은 부모로부터 새로운 props를 받을 때마다</p>\n</li>\n<li>\n<p><strong>어디서?</strong>\r\n→ React 내부의 <strong>Reconciliation 단계</strong> (<code class=\"language-text\">reconcileChildren</code> 등)에서 자동으로!</p>\n</li>\n<li>\n<p><strong>직접 호출하지 않음</strong>\r\n→ Diff 로직은 모두 React 라이브러리 안에 있으니, 개발자는 “언제 업데이트할지” (<code class=\"language-text\">setState</code>)만 결정하면 됩니다.</p>\n</li>\n</ul>\n<hr>\n<h1>7. 초보자용 팁</h1>\n<ul>\n<li>\n<p><strong>JSX 문법</strong>: HTML과 비슷하지만, <code class=\"language-text\">className</code>, <code class=\"language-text\">htmlFor</code> 등 속성이 달라요</p>\n</li>\n<li>\n<p><strong>key 속성</strong>: 리스트 렌더링 시 <code class=\"language-text\">key</code>를 꼭 달아야 효율적인 diff 가능</p>\n</li>\n<li>\n<p><strong>DevTools 활용</strong>:</p>\n<ul>\n<li>React 탭 → 가상 DOM 트리 확인</li>\n<li>Components 탭 → 상태(state)/속성(props) 변경 추적</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"가상 DOM(Virtual DOM)","date":"May 22, 2025","description":"**메모리상의 가벼운 객체**   실제 브라우저 DOM과 거의 같은 구조를 가진 자바스크립트 객체 트리 **React 내부에서만 존재**   우리가 작성한 JSX ➔ `React.createElement()` ➔ 가상 DOM 트리를 생성 "}},"previous":{"fields":{"slug":"/JSX/"},"frontmatter":{"title":"JSX란 무엇인가?"}},"next":{"fields":{"slug":"/리액트의렌더링/"},"frontmatter":{"title":"React의 렌더링 과정을 파악하자"}}},"pageContext":{"id":"d9bff85d-455b-5e4e-9388-2103588ef4a6","previousPostId":"b1232c62-10ab-5b7e-8382-1a48124ad3fc","nextPostId":"cdb64b3f-0ed1-5e27-8f8f-c6dd7b2b69a1"}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}