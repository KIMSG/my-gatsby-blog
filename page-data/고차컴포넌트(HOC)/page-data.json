{"componentChunkName":"component---src-templates-blog-post-js","path":"/고차컴포넌트(HOC)/","result":{"data":{"site":{"siteMetadata":{"title":"모던리액트딥다이브 스터디를 하고 있습니다."}},"markdownRemark":{"id":"4c35f559-b499-56d6-a10c-e8250da4e834","excerpt":"✅ 한 줄 정의 고차 컴포넌트(HOC…","html":"<h2>✅ 한 줄 정의</h2>\n<blockquote>\n<p><strong>고차 컴포넌트(HOC)는 컴포넌트를 인자로 받아 새로운 컴포넌트를 반환하는 함수입니다.</strong></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">withSomething</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">WrappedComponent</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">EnhancedComponent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\">// 여기에 공통 로직 추가</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">WrappedComponent</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\r\n  <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h2>🧠 왜 쓰는 걸까?</h2>\n<p>공통 기능을 여러 컴포넌트에서 재사용하고 싶을 때 유용해요.</p>\n<p>예를 들어:</p>\n<ul>\n<li>인증된 사용자만 볼 수 있는 페이지</li>\n<li>로딩 처리</li>\n<li>에러 처리</li>\n<li>마우스 위치 추적</li>\n<li>공통 스타일 적용 등등</li>\n</ul>\n<hr>\n<h2>🔍 예시: 로딩 처리 HOC</h2>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">withLoading</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">Component</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">WithLoadingComponent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> isLoading<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>props <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isLoading<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">로딩 중...</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Component</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\r\n  <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token comment\">// 사용</span>\r\n<span class=\"token keyword\">const</span> UserListWithLoading <span class=\"token operator\">=</span> <span class=\"token function\">withLoading</span><span class=\"token punctuation\">(</span>UserList<span class=\"token punctuation\">)</span></code></pre></div>\n<hr>\n<h2>📌 특징 요약</h2>\n<table>\n<thead>\n<tr>\n<th>항목</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>✅ 목적</td>\n<td>컴포넌트 로직 재사용</td>\n</tr>\n<tr>\n<td>🔁 반환</td>\n<td><strong>새 컴포넌트</strong> 반환</td>\n</tr>\n<tr>\n<td>💡 패턴</td>\n<td>함수형 프로그래밍 방식</td>\n</tr>\n<tr>\n<td>📦 React 제공 아님</td>\n<td>HOC는 React에 내장된 기능이 아닌, <strong>패턴</strong>입니다</td>\n</tr>\n<tr>\n<td>⚠️ 주의</td>\n<td>HOC 내부에서 props를 잘 전달해야 함 (<code class=\"language-text\">{...props}</code>)</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2>🆚 HOC vs 커스텀 훅</h2>\n<table>\n<thead>\n<tr>\n<th>HOC</th>\n<th>커스텀 훅</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>컴포넌트를 반환</td>\n<td>데이터를 반환</td>\n</tr>\n<tr>\n<td>JSX 구조 조작 가능</td>\n<td>JSX 조작 불가능</td>\n</tr>\n<tr>\n<td>클래스형 컴포넌트에서도 사용 가능</td>\n<td>함수형 컴포넌트에서만 사용 가능</td>\n</tr>\n</tbody>\n</table>","frontmatter":{"title":"리액트 고차 컴포넌트(HOC)","date":"May 26, 2025","description":"고차 컴포넌트(HOC)는 컴포넌트를 인자로 받아 새로운 컴포넌트를 반환하는 함수입니다."}},"previous":{"fields":{"slug":"/상태관리/"},"frontmatter":{"title":"리액트 훅으로 시작하는 상태관리"}},"next":null},"pageContext":{"id":"4c35f559-b499-56d6-a10c-e8250da4e834","previousPostId":"3700029f-490a-5c52-b5fc-cfd83ac18133","nextPostId":null}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}