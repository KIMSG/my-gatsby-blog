{"componentChunkName":"component---src-templates-blog-post-js","path":"/리액트HOOK/","result":{"data":{"site":{"siteMetadata":{"title":"모던리액트딥다이브 스터디를 하고 있습니다."}},"markdownRemark":{"id":"93186cf0-0238-52ae-946e-c34e6b15e9b3","excerpt":"🔍 1. 란? 함수형 컴포넌트에서 상태값을 만들고, 그 값을 변경할 수 있도록 도와주는 Hook. 🧠 2. 기본 개념 정리 용어 설명  상태값을 선언함  현재 상태값  상태를 변경하는 함수 (변경 시 자동으로 렌더링됨) 초기값 의…","html":"<hr>\n<h2>🔍 1. <code class=\"language-text\">useState</code>란?</h2>\n<p>함수형 컴포넌트에서 상태값을 만들고, 그 값을 변경할 수 있도록 도와주는 Hook.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\r\n\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// count 초기값은 0</span>\r\n\r\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\r\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\r\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">현재 카운트: </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\r\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">증가</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\r\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\r\n  <span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h2>🧠 2. 기본 개념 정리</h2>\n<table>\n<thead>\n<tr>\n<th>용어</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">useState()</code></td>\n<td>상태값을 선언함</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">count</code></td>\n<td>현재 상태값</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">setCount</code></td>\n<td>상태를 변경하는 함수 (변경 시 자동으로 렌더링됨)</td>\n</tr>\n<tr>\n<td>초기값</td>\n<td><code class=\"language-text\">useState(0)</code>의 0은 초기값. 문자열, 객체, 배열, 불린 등 모두 가능</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2>💡 3. 상태 변경 시 주의할 점</h2>\n<ol>\n<li><strong>기존 값을 기반으로 새로운 값을 설정할 땐 함수형 업데이트 사용</strong></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prev</span> <span class=\"token operator\">=></span> prev <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 안전한 방식</span></code></pre></div>\n<ol start=\"2\">\n<li><strong>상태 변경은 비동기 처리됨</strong></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 여전히 이전 값이 출력됨</span></code></pre></div>\n<hr>\n<h2>🧪 4. 객체/배열 상태 다루기</h2>\n<h3>✅ 객체</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>user<span class=\"token punctuation\">,</span> setUser<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Kim\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">30</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">updateName</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token function\">setUser</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prev</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>prev<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Lee\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 불변성 유지</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>✅ 배열</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>todos<span class=\"token punctuation\">,</span> setTodos<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addTodo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token function\">setTodos</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prev</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>prev<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> <span class=\"token string\">\"할 일 추가\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h2>📦 5. 여러 개의 상태 선언</h2>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">,</span> setName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>age<span class=\"token punctuation\">,</span> setAge<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>→ 필요할 만큼 <code class=\"language-text\">useState</code> 여러 번 선언해도 전혀 문제 없음.</p>\n<hr>\n<h2>🧷 6. 초기값을 함수로 전달하기 (Lazy Initialization)</h2>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"초기화 작업 실행!\"</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token keyword\">return</span> <span class=\"token function\">expensiveComputation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 리렌더링마다 다시 계산되지 않음</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<hr>\n<h2>🔚 정리</h2>\n<table>\n<thead>\n<tr>\n<th>✅ 정리 포인트</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">useState</code>는 리액트 상태의 핵심</td>\n</tr>\n<tr>\n<td>set함수를 쓰면 컴포넌트는 <strong>자동으로 다시 렌더링됨</strong></td>\n</tr>\n<tr>\n<td>객체나 배열일 경우 <strong>불변성 유지</strong> 중요</td>\n</tr>\n<tr>\n<td>이전 상태를 기준으로 바꿀 땐 <strong>함수형 업데이트</strong> 사용</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<p>다음으로 더 알고 싶은 게 있다면 말해줘! 예를 들어 <code class=\"language-text\">useEffect</code>, 또는 실습 예제 같이 해보고 싶으면 바로 알려줘도 좋아. 🙂</p>","frontmatter":{"title":"`useState`는 리액트 Hook 중 가장 기본","date":"May 23, 2025","description":"`useState`는 리액트 Hook 중 가장 기본이면서도 **가장 자주 사용되는 상태(state) 관리 도구**야. 아래 내용을 통해 `useState`를 완벽히 이해할 수 있게 단계별로 설명할게!"}},"previous":{"fields":{"slug":"/리액트의렌더링/"},"frontmatter":{"title":"React의 렌더링 과정을 파악하자"}},"next":null},"pageContext":{"id":"93186cf0-0238-52ae-946e-c34e6b15e9b3","previousPostId":"cdb64b3f-0ed1-5e27-8f8f-c6dd7b2b69a1","nextPostId":null}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}