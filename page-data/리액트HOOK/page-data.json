{"componentChunkName":"component---src-templates-blog-post-js","path":"/리액트HOOK/","result":{"data":{"site":{"siteMetadata":{"title":"모던리액트딥다이브 스터디를 하고 있습니다."}},"markdownRemark":{"id":"93186cf0-0238-52ae-946e-c34e6b15e9b3","excerpt":"🔍 1. 란? 함수형 컴포넌트에서 상태값을 만들고, 그 값을 변경할 수 있도록 도와주는 Hook. 🧠 2. 기본 개념 정리 용어 설명  상태값을 선언함  현재 상태값  상태를 변경하는 함수 (변경 시 자동으로 렌더링됨) 초기값 의…","html":"<hr>\n<h2>🔍 1. <code class=\"language-text\">useState</code>란?</h2>\n<p>함수형 컴포넌트에서 상태값을 만들고, 그 값을 변경할 수 있도록 도와주는 Hook.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\r\n\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// count 초기값은 0</span>\r\n\r\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\r\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\r\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">현재 카운트: </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\r\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">증가</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\r\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\r\n  <span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h2>🧠 2. 기본 개념 정리</h2>\n<table>\n<thead>\n<tr>\n<th>용어</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">useState()</code></td>\n<td>상태값을 선언함</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">count</code></td>\n<td>현재 상태값</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">setCount</code></td>\n<td>상태를 변경하는 함수 (변경 시 자동으로 렌더링됨)</td>\n</tr>\n<tr>\n<td>초기값</td>\n<td><code class=\"language-text\">useState(0)</code>의 0은 초기값. 문자열, 객체, 배열, 불린 등 모두 가능</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2>💡 3. 상태 변경 시 주의할 점</h2>\n<ol>\n<li><strong>기존 값을 기반으로 새로운 값을 설정할 땐 함수형 업데이트 사용</strong></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prev</span> <span class=\"token operator\">=></span> prev <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 안전한 방식</span></code></pre></div>\n<ol start=\"2\">\n<li><strong>상태 변경은 비동기 처리됨</strong></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 여전히 이전 값이 출력됨</span></code></pre></div>\n<hr>\n<h2>🧪 4. 객체/배열 상태 다루기</h2>\n<h3>✅ 객체</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>user<span class=\"token punctuation\">,</span> setUser<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Kim\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">30</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">updateName</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token function\">setUser</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prev</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>prev<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Lee\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 불변성 유지</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>✅ 배열</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>todos<span class=\"token punctuation\">,</span> setTodos<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addTodo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token function\">setTodos</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prev</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>prev<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> <span class=\"token string\">\"할 일 추가\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h2>📦 5. 여러 개의 상태 선언</h2>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">,</span> setName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>age<span class=\"token punctuation\">,</span> setAge<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>→ 필요할 만큼 <code class=\"language-text\">useState</code> 여러 번 선언해도 전혀 문제 없음.</p>\n<hr>\n<h2>🧷 6. 초기값을 함수로 전달하기 (Lazy Initialization)</h2>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"초기화 작업 실행!\"</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token keyword\">return</span> <span class=\"token function\">expensiveComputation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 리렌더링마다 다시 계산되지 않음</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<hr>\n<h2>🔚 정리</h2>\n<table>\n<thead>\n<tr>\n<th>✅ 정리 포인트</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">useState</code>는 리액트 상태의 핵심</td>\n</tr>\n<tr>\n<td>set함수를 쓰면 컴포넌트는 <strong>자동으로 다시 렌더링됨</strong></td>\n</tr>\n<tr>\n<td>객체나 배열일 경우 <strong>불변성 유지</strong> 중요</td>\n</tr>\n<tr>\n<td>이전 상태를 기준으로 바꿀 땐 <strong>함수형 업데이트</strong> 사용</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2>🔍 1. <code class=\"language-text\">useEffect</code>란?</h2>\n<p>이 코드는 React에서 <code class=\"language-text\">useEffect</code>와 <code class=\"language-text\">addEventListener</code>를 이용해 클릭 이벤트를 처리하는 예제입니다. 해당 코드를 실행하면 어떤 일이 일어나는지 순서대로 설명해 드릴게요.</p>\n<hr>\n<h3>전체 코드 요약</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\r\n\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>counter<span class=\"token punctuation\">,</span> setCounter<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\r\n\r\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token function\">setCounter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prev</span> <span class=\"token operator\">=></span> prev <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">}</span>\r\n\r\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">function</span> <span class=\"token function\">addMouseEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> addMouseEvent<span class=\"token punctuation\">)</span>\r\n\r\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"클린업 함수 실행!\"</span><span class=\"token punctuation\">,</span> counter<span class=\"token punctuation\">)</span>\r\n      window<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> addMouseEvent<span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">}</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>counter<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n\r\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\r\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\r\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>counter<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\r\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">+</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\r\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\r\n  <span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h3>실행 결과 및 동작 순서</h3>\n<h4>1. <strong>처음 렌더링</strong></h4>\n<ul>\n<li><code class=\"language-text\">counter</code>는 0</li>\n<li><code class=\"language-text\">addMouseEvent</code>가 <code class=\"language-text\">window</code>의 <code class=\"language-text\">'click'</code> 이벤트에 등록됨</li>\n<li>이 상태에서 창 아무 데나 클릭하면 <code class=\"language-text\">console.log(counter)</code>가 실행되고 <code class=\"language-text\">0</code>이 출력됨</li>\n</ul>\n<h4>2. <strong>버튼 클릭 시</strong></h4>\n<ul>\n<li>\n<p>버튼 클릭 → <code class=\"language-text\">handleClick</code> 호출 → <code class=\"language-text\">counter</code>가 1 증가</p>\n</li>\n<li>\n<p><code class=\"language-text\">counter</code>가 변경되면서 <code class=\"language-text\">useEffect</code>가 다시 실행됨</p>\n<ul>\n<li>\n<p>이때 <strong>이전 effect의 클린업 함수</strong>가 먼저 실행됨</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">클린업 함수 실행! 0</code></pre></div>\n</li>\n<li>\n<p>그 후 <strong>새로운 effect가 실행되어</strong> 새로운 <code class=\"language-text\">addMouseEvent</code>가 등록됨</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4>3. <strong>두 번째 클릭</strong></h4>\n<ul>\n<li>브라우저 아무 곳이나 클릭 → 새로운 <code class=\"language-text\">addMouseEvent</code> 실행 → <code class=\"language-text\">1</code> 출력</li>\n</ul>\n<h4>계속해서 반복하면:</h4>\n<ul>\n<li>\n<p><code class=\"language-text\">+</code> 버튼 클릭 시:</p>\n<ul>\n<li>클린업 함수가 실행되고 이전 <code class=\"language-text\">counter</code> 출력</li>\n<li>새로운 이벤트 핸들러가 등록되고, 클릭 시 현재 <code class=\"language-text\">counter</code> 출력</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3>요약된 콘솔 출력 예시</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">0                // 첫 렌더링 후 창 클릭\r\n클린업 함수 실행! 0  // 버튼 클릭 후 effect 재실행\r\n1                // 두 번째 클릭\r\n클린업 함수 실행! 1\r\n2\r\n클린업 함수 실행! 2\r\n3\r\n...</code></pre></div>\n<hr>\n<h3>주의 포인트</h3>\n<ul>\n<li><code class=\"language-text\">addMouseEvent</code>는 매번 새로 정의되기 때문에 <code class=\"language-text\">removeEventListener</code>가 정확히 제거할 수 있음 (클로저로 인해 <code class=\"language-text\">counter</code> 값이 유지됨)</li>\n<li>하지만 이 구조는 <code class=\"language-text\">window</code>에 계속 이벤트를 붙였다 떼었다 하므로 성능상 주의가 필요</li>\n</ul>\n<hr>\n<p>맞아요! 정확히 이해하셨어요 👏\r\n<code class=\"language-text\">useEffect</code>에서 <strong>이전 이벤트 핸들러를 제거(remove)</strong> 하는 건 아주 핵심적인 개념이에요. 정리해드리면:</p>\n<hr>\n<h3>✅ <code class=\"language-text\">useEffect</code>의 핵심 포인트 정리</h3>\n<h4>1. <code class=\"language-text\">useEffect</code>는 상태(state)나 props가 바뀔 때마다 다시 실행됨</h4>\n<ul>\n<li><code class=\"language-text\">[counter]</code>가 바뀔 때마다 effect 실행</li>\n<li>즉, 매번 <strong>새로운 <code class=\"language-text\">addMouseEvent</code> 함수</strong>가 만들어짐</li>\n</ul>\n<h4>2. 이때 <strong>이전 effect를 정리(clean-up)</strong> 하지 않으면</h4>\n<ul>\n<li><code class=\"language-text\">window</code>에 이벤트 리스너가 계속 누적됨 → 클릭할 때 로그가 여러 번 찍힘 → <strong>메모리 누수, 중복 호출</strong> 등 버그 발생 가능</li>\n</ul>\n<h4>3. 그래서 반드시 <strong>clean-up 함수에서 removeEventListener</strong>를 호출해줘야 함</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  window<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> addMouseEvent<span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h3>📌 쉽게 비유하자면:</h3>\n<ul>\n<li><code class=\"language-text\">useEffect</code>는 \"새로운 사람(addMouseEvent)을 등록하기 전에, 이전 사람을 퇴사(remove)시키는 절차\"가 필요한 거예요.</li>\n<li>그렇지 않으면 계속 사람들이 쌓이고 다들 일을 하게 돼서 복잡해지고 느려짐 😓</li>\n</ul>\n<hr>\n<h3>💡 한 줄 요약</h3>\n<blockquote>\n<p><code class=\"language-text\">useEffect</code>에서 이벤트 등록할 때는 항상 <code class=\"language-text\">return</code>으로 <strong>정리(clean-up)</strong> 하는 습관을 들이자!</p>\n</blockquote>","frontmatter":{"title":"리액트 Hook 중 가장 기본","date":"May 23, 2025","description":"`useState`는 리액트 Hook 중 가장 기본이면서도 **가장 자주 사용되는 상태(state) 관리 도구**야. 아래 내용을 통해 `useState`를 완벽히 이해할 수 있게 단계별로 설명할게!"}},"previous":{"fields":{"slug":"/리액트의렌더링/"},"frontmatter":{"title":"React의 렌더링 과정을 파악하자"}},"next":{"fields":{"slug":"/nextjs입문/"},"frontmatter":{"title":"Next.js를 쓰는 기본"}}},"pageContext":{"id":"93186cf0-0238-52ae-946e-c34e6b15e9b3","previousPostId":"cdb64b3f-0ed1-5e27-8f8f-c6dd7b2b69a1","nextPostId":"e4d48a3b-f5f4-5706-98e8-335b59f23c6e"}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}