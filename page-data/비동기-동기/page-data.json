{"componentChunkName":"component---src-templates-blog-post-js","path":"/비동기-동기/","result":{"data":{"site":{"siteMetadata":{"title":"모던딥다이브 스터디를 하고 있습니다."}},"markdownRemark":{"id":"bef5954f-9a8e-56fb-b5dd-0d53856a8653","excerpt":"개요 JavaScript의 이벤트 루프는 동기 코드, 태스크 큐(맥로태스크), 마이크로 태스크 큐를 통해 비동기 작업을 관리합니다. 본 포스트에서는 각 실행 방식의 차이점을 살펴보고 예제 코드를 통해 이해를 돕습니다. 1. 동기 코드 (Synchronous…","html":"<h1>개요</h1>\n<p>JavaScript의 <strong>이벤트 루프</strong>는 동기 코드, 태스크 큐(맥로태스크), 마이크로 태스크 큐를 통해 비동기 작업을 관리합니다.<br>\n본 포스트에서는 각 실행 방식의 차이점을 살펴보고 예제 코드를 통해 이해를 돕습니다.</p>\n<hr>\n<h2>1. 동기 코드 (Synchronous)</h2>\n<ul>\n<li><strong>정의</strong>: 코드가 순차적으로 바로 실행됩니다.</li>\n<li><strong>특징</strong>: 다른 작업이 실행되기 전까지 블로킹(blocking)이 발생할 수 있습니다.</li>\n<li><strong>예제</strong>:\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 0부터 100000까지 sync 버튼에 렌더링</span>\r\nsync<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    sync<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> i\r\n  <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n<hr>\n<h2>2. 태스크 큐 (Macrotask Queue)</h2>\n<ul>\n<li>\n<p><strong>정의</strong>: <code class=\"language-text\">setTimeout</code>, <code class=\"language-text\">setInterval</code>, DOM 이벤트 등이 속하며, 이벤트 루프의 매 턴마다 한 번씩 실행됩니다.</p>\n</li>\n<li>\n<p><strong>특징</strong>: macrotasks는 동기 코드가 완료된 후에 실행됩니다.</p>\n</li>\n<li>\n<p><strong>예제</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 0부터 100000까지 setTimeout으로 macrotask 큐에 넣어 렌더링</span>\r\nmacrotask<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n      macrotask<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> i\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n<hr>\n<h2>3. 마이크로 태스크 큐 (Microtask Queue)</h2>\n<ul>\n<li>\n<p><strong>정의</strong>: <code class=\"language-text\">Promise.then</code>, <code class=\"language-text\">queueMicrotask</code> 등이 속하며, 마이크로태스크는 macrotask 사이에서도 우선 실행됩니다.</p>\n</li>\n<li>\n<p><strong>특징</strong>: 현재 실행 중인 스크립트가 끝난 직후, 다음 macrotask 실행 전까지 모든 마이크로태스크가 처리됩니다.</p>\n</li>\n<li>\n<p><strong>예제</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 0부터 100000까지 queueMicrotask로 마이크로태스크 큐에 넣어 렌더링</span>\r\nmicrotask<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token function\">queueMicrotask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n      microtask<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> i\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n<hr>\n<h2>4. 동시 실행 비교</h2>\n<p>아래 코드를 통해 세 가지 실행 방식을 동시에 호출했을 때의 차이를 직접 확인할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">macro_micro<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\">// 동기</span>\r\n    sync<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> i\r\n    <span class=\"token comment\">// 맥로태스크</span>\r\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n      macrotask<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> i\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token comment\">// 마이크로태스크</span>\r\n    <span class=\"token function\">queueMicrotask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n      microtask<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> i\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<hr>\n<blockquote>\n<p><strong>결론</strong>:</p>\n<ul>\n<li><strong>동기 코드는</strong> 즉시 실행되지만 블로킹이 발생할 수 있습니다.</li>\n<li><strong>Macrotasks는</strong> 이벤트 루프 턴마다 실행되어 UI 렌더링이 지연될 수 있습니다.</li>\n<li><strong>Microtasks는</strong> 현재 스크립트 후 바로 실행되어 빠른 후속 작업 처리에 유리합니다.</li>\n</ul>\n</blockquote>","frontmatter":{"title":"JavaScript Event Loop: Sync, Macro, and Micro Tasks","date":"May 22, 2025","description":"Exploring how JavaScript handles synchronous code, macrotasks, and microtasks"}},"previous":{"fields":{"slug":"/hello-world/"},"frontmatter":{"title":"Hello World"}},"next":{"fields":{"slug":"/클로저의 활용/"},"frontmatter":{"title":"클로저 입문 및 활용 정리"}}},"pageContext":{"id":"bef5954f-9a8e-56fb-b5dd-0d53856a8653","previousPostId":"968c5589-e80a-51c8-b603-755f45eb82f0","nextPostId":"1e2016b1-9430-5c5a-98aa-136a85505c2a"}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}