{"componentChunkName":"component---src-templates-blog-post-js","path":"/Java기초/","result":{"data":{"site":{"siteMetadata":{"title":"모던리액트딥다이브 스터디를 하고 있습니다."}},"markdownRemark":{"id":"4985cca8-49eb-58cd-aea6-ae8d740e7aa8","excerpt":"Phase 1. 언어 & 실행 환경 이해 JVM · JDK · JRE 개요 목표: 자바 프로그램이 어떻게 실행되는지, JDK/JRE/JVM의 역할을 명확히 이해 주요 내용: 클래스 로딩 과정, 바이트코드 → JIT 컴파일, 메모리 구조(Heap, Stack, Method Area…","html":"<hr>\n<h2>Phase 1. 언어 &#x26; 실행 환경 이해</h2>\n<ol>\n<li>\n<p><strong>JVM · JDK · JRE 개요</strong></p>\n<ul>\n<li><strong>목표</strong>: 자바 프로그램이 어떻게 실행되는지, JDK/JRE/JVM의 역할을 명확히 이해</li>\n<li><strong>주요 내용</strong>: 클래스 로딩 과정, 바이트코드 → JIT 컴파일, 메모리 구조(Heap, Stack, Method Area)</li>\n</ul>\n</li>\n<li>\n<p><strong>개발 환경 설정</strong></p>\n<ul>\n<li><strong>목표</strong>: IntelliJ IDEA + Maven/Gradle 프로젝트 생성부터 디버깅까지 워크플로우 확립</li>\n<li><strong>주요 내용</strong>: JDK 24 설치·환경변수, IDE 기본 사용, 빌드 도구 구조 (pom.xml/build.gradle)</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2>Phase 2. 문법 &#x26; 제어 흐름</h2>\n<ol start=\"3\">\n<li>\n<p><strong>기본 자료형 &#x26; 변수</strong></p>\n<ul>\n<li><strong>목표</strong>: 모든 타입의 차이(primitive vs reference)와 메모리 모델 이해</li>\n<li><strong>주요 내용</strong>: boolean, byte, char, short, int, long, float, double; 변수 스코프; 리터럴</li>\n</ul>\n</li>\n<li>\n<p><strong>연산자와 제어문</strong></p>\n<ul>\n<li><strong>목표</strong>: 모든 연산자 우선순위와 제어문 흐름 파악</li>\n<li><strong>주요 내용</strong>: 산술·비교·논리·할당 연산자, if-else, switch, for/while, break·continue</li>\n</ul>\n</li>\n<li>\n<p><strong>메서드 &#x26; 패키지</strong></p>\n<ul>\n<li><strong>목표</strong>: 메서드 호출 규칙, 오버로딩/가변인자 문법, 패키지 구조 이해</li>\n<li><strong>주요 내용</strong>: <code class=\"language-text\">static</code> vs 인스턴스 메서드, 리턴타입, 접근 제한자, import</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2>Phase 3. 객체지향 프로그래밍</h2>\n<ol start=\"6\">\n<li>\n<p><strong>클래스와 객체</strong></p>\n<ul>\n<li><strong>목표</strong>: 클래스로 현실 세계 모델링하기</li>\n<li><strong>주요 내용</strong>: 필드·메서드·생성자, <code class=\"language-text\">this</code>, <code class=\"language-text\">final</code> 클래스/메서드/변수</li>\n</ul>\n</li>\n<li>\n<p><strong>상속(Inheritance) &#x26; 다형성(Polymorphism)</strong></p>\n<ul>\n<li><strong>목표</strong>: 코드 재사용과 유연성 극대화</li>\n<li><strong>주요 내용</strong>: <code class=\"language-text\">extends</code>/<code class=\"language-text\">super</code>, 오버라이딩 vs 오버로딩, 업캐스팅·다운캐스팅</li>\n</ul>\n</li>\n<li>\n<p><strong>추상화(Abstraction) &#x26; 인터페이스(Interface)</strong></p>\n<ul>\n<li><strong>목표</strong>: 설계 시 느슨한 결합(loose coupling) 달성</li>\n<li><strong>주요 내용</strong>: <code class=\"language-text\">abstract</code> 클래스, 인터페이스 기본/디폴트/정적 메서드, 다중 구현</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2>Phase 4. 표준 라이브러리 활용</h2>\n<ol start=\"9\">\n<li>\n<p><strong>기본 API 클래스</strong></p>\n<ul>\n<li><strong>목표</strong>: 자주 쓰는 유틸리티 클래스 능숙 사용</li>\n<li><strong>주요 내용</strong>: <code class=\"language-text\">String</code>/<code class=\"language-text\">StringBuilder</code>, 래퍼 클래스, <code class=\"language-text\">Math</code>, <code class=\"language-text\">java.time</code> 패키지</li>\n</ul>\n</li>\n<li>\n<p><strong>컬렉션 프레임워크</strong></p>\n<ul>\n<li><strong>목표</strong>: 자료구조 특성에 맞는 구조 선택</li>\n<li><strong>주요 내용</strong>: <code class=\"language-text\">List</code>(ArrayList, LinkedList), <code class=\"language-text\">Set</code>(HashSet, TreeSet), <code class=\"language-text\">Map</code>(HashMap, TreeMap), <code class=\"language-text\">Iterator</code></li>\n</ul>\n</li>\n<li>\n<p><strong>제네릭(Generics)</strong></p>\n<ul>\n<li><strong>목표</strong>: 타입 안전성과 재사용성 확보</li>\n<li><strong>주요 내용</strong>: 제네릭 클래스/메서드, 와일드카드(<code class=\"language-text\">? extends</code>, <code class=\"language-text\">? super</code>), 타입 소거(type erasure)</li>\n</ul>\n</li>\n<li>\n<p><strong>람다식 &#x26; 스트림(Stream API)</strong></p>\n<ul>\n<li><strong>목표</strong>: 함수형 프로그래밍 기초 이해</li>\n<li><strong>주요 내용</strong>: <code class=\"language-text\">Function</code>, <code class=\"language-text\">Consumer</code>, <code class=\"language-text\">Predicate</code> 인터페이스, <code class=\"language-text\">stream()</code> → <code class=\"language-text\">filter</code>·<code class=\"language-text\">map</code>·<code class=\"language-text\">reduce</code></li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2>Phase 5. 예외·I/O·동시성</h2>\n<ol start=\"13\">\n<li>\n<p><strong>예외 처리(Exception Handling)</strong></p>\n<ul>\n<li><strong>목표</strong>: 안정적인 오류 관리</li>\n<li><strong>주요 내용</strong>: Checked vs Unchecked, <code class=\"language-text\">try-catch-finally</code>, <code class=\"language-text\">throws</code>, 사용자 정의 예외</li>\n</ul>\n</li>\n<li>\n<p><strong>입출력 스트림(I/O &#x26; NIO)</strong></p>\n<ul>\n<li><strong>목표</strong>: 파일·네트워크 데이터 입출력 원리 완전 정복</li>\n<li><strong>주요 내용</strong>: 바이트 vs 문자 스트림, <code class=\"language-text\">BufferedReader</code>/<code class=\"language-text\">BufferedWriter</code>, NIO <code class=\"language-text\">Channel</code>·<code class=\"language-text\">Buffer</code></li>\n</ul>\n</li>\n<li>\n<p><strong>멀티스레딩 &#x26; 동시성(Concurrency)</strong></p>\n<ul>\n<li><strong>목표</strong>: 안전한 동시성 프로그래밍</li>\n<li><strong>주요 내용</strong>: <code class=\"language-text\">Thread</code>·<code class=\"language-text\">Runnable</code>, <code class=\"language-text\">synchronized</code>, <code class=\"language-text\">Lock</code> 인터페이스, <code class=\"language-text\">ExecutorService</code></li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2>Phase 6. JVM 심화 &#x26; 부가 개념</h2>\n<ol start=\"16\">\n<li>\n<p><strong>JVM 메모리 모델 &#x26; GC</strong></p>\n<ul>\n<li><strong>목표</strong>: 성능 최적화와 메모리 문제 해결 기반 마련</li>\n<li><strong>주요 내용</strong>: Young/Old Generation, GC 알고리듬(G1, Serial, Parallel)</li>\n</ul>\n</li>\n<li>\n<p><strong>리플렉션(Reflection) &#x26; 애노테이션(Annotation)</strong></p>\n<ul>\n<li><strong>목표</strong>: 프레임워크 동작 원리(예: 스프링 DI) 이해</li>\n<li><strong>주요 내용</strong>: <code class=\"language-text\">Class</code> 객체, <code class=\"language-text\">getMethod</code>·<code class=\"language-text\">invoke</code>, 커스텀 애노테이션, 애노테이션 처리</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3>📌 학습 가이드</h3>\n<ul>\n<li>\n<p><strong>매 모듈마다</strong>:</p>\n<ol>\n<li>핵심 개념 정리</li>\n<li>작은 예제 코드 작성</li>\n<li>연습 문제(알고리즘 + 설계 과제) 해결</li>\n</ol>\n</li>\n<li>\n<p><strong>매주 복습</strong>: 이전 모듈 핵심 키워드 퀴즈 &#x26; 코드 리팩토링</p>\n</li>\n<li>\n<p><strong>최종 프로젝트</strong>: 순수 Java로 간단 ‘도서 관리 시스템’ 등을 만들어 보며 전체 흐름 점검</p>\n</li>\n</ul>","frontmatter":{"title":"#java 0. 자바 “기초”에 집중","date":"May 23, 2024","description":"오로지 자바 “기초”에 집중해 완벽한 이해를 돕기 위해 재구성한 커리큘럼입니다. 각 모듈별로 학습 목표와 주요 학습 내용을 담고 있으니, 이 순서대로 차근차근 따라가 보세요."}},"previous":{"fields":{"slug":"/hello-world/"},"frontmatter":{"title":"Hello World"}},"next":{"fields":{"slug":"/클로저의 활용/"},"frontmatter":{"title":"클로저 입문 및 활용 정리"}}},"pageContext":{"id":"4985cca8-49eb-58cd-aea6-ae8d740e7aa8","previousPostId":"968c5589-e80a-51c8-b603-755f45eb82f0","nextPostId":"1e2016b1-9430-5c5a-98aa-136a85505c2a"}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}